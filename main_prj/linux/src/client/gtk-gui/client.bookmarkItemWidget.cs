
// This file has been generated by the GUI designer. Do not modify.
namespace client
{
	public partial class bookmarkItemWidget
	{
		private global::Gtk.EventBox eventbox;

		private global::Gtk.Fixed fixed1;

		private global::Gtk.Image imageServer;

		private global::Gtk.Label labelServerName;

		private global::Gtk.Image imageDesktop;

		private global::Gtk.Image imageArrow;

		private global::Gtk.Label labelDesktopName;

		private global::Gtk.Label labelDesktopIP;

		protected virtual void Build()
		{
			global::Stetic.Gui.Initialize(this);
			// Widget client.bookmarkItemWidget
			global::Stetic.BinContainer.Attach(this);
			this.WidthRequest = 520;
			this.HeightRequest = 73;
			this.Name = "client.bookmarkItemWidget";
			// Container child client.bookmarkItemWidget.Gtk.Container+ContainerChild
			this.eventbox = new global::Gtk.EventBox();
			this.eventbox.Name = "eventbox";
			// Container child eventbox.Gtk.Container+ContainerChild
			this.fixed1 = new global::Gtk.Fixed();
			this.fixed1.Name = "fixed1";
			this.fixed1.HasWindow = false;
			// Container child fixed1.Gtk.Fixed+FixedChild
			this.imageServer = new global::Gtk.Image();
			this.imageServer.Name = "imageServer";
			this.imageServer.Pixbuf = global::Gdk.Pixbuf.LoadFromResource("client.Resources.icon_broker_enable.png");
			this.fixed1.Add(this.imageServer);
			global::Gtk.Fixed.FixedChild w1 = ((global::Gtk.Fixed.FixedChild)(this.fixed1[this.imageServer]));
			w1.X = 22;
			w1.Y = 30;
			// Container child fixed1.Gtk.Fixed+FixedChild
			this.labelServerName = new global::Gtk.Label();
			this.labelServerName.Name = "labelServerName";
			this.labelServerName.LabelProp = global::Mono.Unix.Catalog.GetString("<span size=\'15000\'>label1</span>");
			this.labelServerName.UseMarkup = true;
			this.fixed1.Add(this.labelServerName);
			global::Gtk.Fixed.FixedChild w2 = ((global::Gtk.Fixed.FixedChild)(this.fixed1[this.labelServerName]));
			w2.X = 55;
			w2.Y = 30;
			// Container child fixed1.Gtk.Fixed+FixedChild
			this.imageDesktop = new global::Gtk.Image();
			this.imageDesktop.Name = "imageDesktop";
			this.imageDesktop.Pixbuf = global::Gdk.Pixbuf.LoadFromResource("client.Resources.icon_broker_enable.png");
			this.fixed1.Add(this.imageDesktop);
			global::Gtk.Fixed.FixedChild w3 = ((global::Gtk.Fixed.FixedChild)(this.fixed1[this.imageDesktop]));
			w3.X = 227;
			w3.Y = 22;
			// Container child fixed1.Gtk.Fixed+FixedChild
			this.imageArrow = new global::Gtk.Image();
			this.imageArrow.Name = "imageArrow";
			this.imageArrow.Pixbuf = global::Gdk.Pixbuf.LoadFromResource("client.Resources.bookmark_arrow_enable.png");
			this.fixed1.Add(this.imageArrow);
			global::Gtk.Fixed.FixedChild w4 = ((global::Gtk.Fixed.FixedChild)(this.fixed1[this.imageArrow]));
			w4.X = 486;
			w4.Y = 33;
			// Container child fixed1.Gtk.Fixed+FixedChild
			this.labelDesktopName = new global::Gtk.Label();
			this.labelDesktopName.Name = "labelDesktopName";
			this.labelDesktopName.LabelProp = global::Mono.Unix.Catalog.GetString("<span size=\'15000\'>label2</span>");
			this.labelDesktopName.UseMarkup = true;
			this.fixed1.Add(this.labelDesktopName);
			global::Gtk.Fixed.FixedChild w5 = ((global::Gtk.Fixed.FixedChild)(this.fixed1[this.labelDesktopName]));
			w5.X = 270;
			w5.Y = 20;
			// Container child fixed1.Gtk.Fixed+FixedChild
			this.labelDesktopIP = new global::Gtk.Label();
			this.labelDesktopIP.Name = "labelDesktopIP";
			this.labelDesktopIP.LabelProp = global::Mono.Unix.Catalog.GetString("label3");
			this.fixed1.Add(this.labelDesktopIP);
			global::Gtk.Fixed.FixedChild w6 = ((global::Gtk.Fixed.FixedChild)(this.fixed1[this.labelDesktopIP]));
			w6.X = 270;
			w6.Y = 43;
			this.eventbox.Add(this.fixed1);
			this.Add(this.eventbox);
			if ((this.Child != null))
			{
				this.Child.ShowAll();
			}
			this.Hide();
			this.eventbox.ButtonPressEvent += new global::Gtk.ButtonPressEventHandler(this.OnEventboxButtonPressEvent);
			this.eventbox.EnterNotifyEvent += new global::Gtk.EnterNotifyEventHandler(this.OnEventboxEnterNotifyEvent);
			this.eventbox.LeaveNotifyEvent += new global::Gtk.LeaveNotifyEventHandler(this.OnEventboxLeaveNotifyEvent);
		}
	}
}
